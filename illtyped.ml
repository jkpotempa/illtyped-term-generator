let safeHead list = 
    match list with
    | [] -> None
    | (h::t) -> Some h

let safeTail list =
    match list with
    | [] -> []
    | (h::t) -> t

let compose f g x = f (g x)

let ifthenelse c a b = if c then a else b

let welltypedProgram = (begin match (List.filter) ((begin match (if (true) then ((compose) (Fun.id) ((Fun.id) ((fun x1 -> x1)) ) ((compose) ((fun x2 -> [])) ((&&)) (((&&)) (true) (true) ) ) ) else ((compose) ((if (((<)) (0) (0) ) then (fst) else ((if (false) then (fst) else (fst))))) ((compose) ((if (false) then (Fun.id) else (Fun.id))) ((fun x13 -> fst)) ((safeTail) ([]) ) ) ((([],safeTail),((@)) ([]) ([]) )) )) with | [] -> let y6 = (1) in (snd); | (z3::z4) -> (snd) (((&&),(begin match (safeHead) (z4)  with | None -> z3; | Some x -> x end)))  end)) (((@)) ((safeTail) ((fst) ((let y10 = ([]) in (y10),((-)) (0) (0) )) ) ) (((@)) ((safeTail) (((fun  x23 -> [])) (let y13 = (safeHead) in (0)) ) ) ((List.cons) ((List.cons,(Fun.id) (true) )) ((safeTail) ((safeTail) ([]) ) ) ) ) )  with | [] -> (begin match (Fun.id) ((safeHead) ((Fun.id) ((fst) (([],(-))) ) ) )  with | None -> (List.filter) (Fun.id) ((begin match (begin match (if ((begin match [] with | [] -> false; | (z33::z34) -> true end)) then ((List.map) (List.cons) ([]) ) else ((Fun.id) ([]) )) with | [] -> (snd) ((snd,[])) ; | (z31::z32) -> (List.filter) (Fun.id) (((@)) ([]) ([]) )  end) with | [] -> (fst) ((let y22 = ([]) in (y22),((<)) (0) (1) )) ; | (z29::z30) -> (safeTail) (((@)) ((safeTail) ([]) ) (((@)) ([]) ([]) ) )  end)) ; | Some x -> x end); | (z1::z2) -> (compose) ((fun x25 -> (safeTail) (((fun  x26 -> x25)) ((Fun.id) (let y24 = ([]) in (0)) ) ) )) ((begin match (Fun.id) ((compose) ((fun x29 -> x29)) (Fun.id) ((safeHead) ((if (true) then ([]) else ([]))) ) )  with | None -> (fun x27 -> (List.cons) (((&&)) (x27) (false) ) ((safeTail) ((List.filter) (Fun.id) ([]) ) ) ); | Some x -> x end)) ((fst) ((((||)) (((&&)) (true) (let y29 = (List.cons) in (false)) ) (((<)) ((List.length) ([]) ) (((~-)) (0) ) ) ,List.filter)) )  end)

let illtypedProgram  = (begin match (List.filter) ((begin match (if (true) then ((compose) (Fun.id) ((Fun.id) ((fun x1 -> (if (let y31 = ((Fun.id) (true) ) in ((List.cons) ((begin match (if (((&&)) (((||)) (true) (y31) ) (y31) ) then (((fun  x38 -> x38)) ((compose) (safeHead) (Fun.id) ([]) ) ) else ((compose) (Fun.id) ((compose) (Fun.id) (Fun.id) (Fun.id) ) ((safeHead) ([]) ) )) with | None -> ((=)) ((Fun.id) (((=)) (y31) (false) ) ) ((if ((compose) (Fun.id) (Fun.id) (true) ) then ((begin match [] with | [] -> false; | (z61::z62) -> true end)) else ((if (y31) then (true) else (true))))) ; | Some x -> x end)) ((Fun.id) (((@)) ((compose) ((Fun.id) (fst) ) (Fun.id) (([],List.length)) ) ((snd) ((compose,[])) ) ) ) )) then (((<)) (((-)) (((~-)) (let y44 = ((if ((Fun.id) (false) ) then ((safeTail) ([]) ) else ([]))) in ((snd) (((~-),1)) )) ) (0) ) (0) ) else ((compose) (fst) ((fun x873 -> (((+)) ((begin match ((@)) ([]) ([])  with | [] -> ((-)) (1) (0) ; | (z783::z784) -> (begin match [] with | [] -> 0; | (z787::z788) -> z783 end) end)) ((fst) ((x873,compose)) ) ,(+)))) ((snd) ((((~-)) ((fst) ((1,(||))) ) ,(List.length) ((safeTail) (((@)) ([]) ([]) ) ) )) ) )))) ) ((compose) ((fun x2 -> [])) ((&&)) (((&&)) (true) (true) ) ) ) else ((compose) ((if (((<)) (0) (0) ) then (fst) else ((if (false) then (fst) else (fst))))) ((compose) ((if (false) then (Fun.id) else (Fun.id))) ((fun x13 -> fst)) ((safeTail) ([]) ) ) ((([],safeTail),((@)) ([]) ([]) )) )) with | [] -> let y6 = (1) in (snd); | (z3::z4) -> (snd) (((&&),(begin match (safeHead) (z4)  with | None -> z3; | Some x -> x end)))  end)) (((@)) ((safeTail) ((fst) ((let y10 = ([]) in (y10),((-)) (0) (0) )) ) ) (((@)) ((safeTail) (((fun  x23 -> [])) (let y13 = (safeHead) in (0)) ) ) ((List.cons) ((List.cons,(Fun.id) (true) )) ((safeTail) ((safeTail) ([]) ) ) ) ) )  with | [] -> (begin match (Fun.id) ((safeHead) ((Fun.id) ((fst) (([],(-))) ) ) )  with | None -> (List.filter) (Fun.id) ((begin match (begin match (if ((begin match [] with | [] -> false; | (z33::z34) -> true end)) then ((List.map) (List.cons) ([]) ) else ((Fun.id) ([]) )) with | [] -> (snd) ((snd,[])) ; | (z31::z32) -> (List.filter) (Fun.id) (((@)) ([]) ([]) )  end) with | [] -> (fst) ((let y22 = ([]) in (y22),((<)) (0) (1) )) ; | (z29::z30) -> (safeTail) (((@)) ((safeTail) ([]) ) (((@)) ([]) ([]) ) )  end)) ; | Some x -> x end); | (z1::z2) -> (compose) ((fun x25 -> (safeTail) (((fun  x26 -> x25)) ((Fun.id) (let y24 = ([]) in (0)) ) ) )) ((begin match (Fun.id) ((compose) ((fun x29 -> x29)) (Fun.id) ((safeHead) ((if (true) then ([]) else ([]))) ) )  with | None -> (fun x27 -> (List.cons) (((&&)) (x27) (false) ) ((safeTail) ((List.filter) (Fun.id) ([]) ) ) ); | Some x -> x end)) ((fst) ((((||)) (((&&)) (true) (let y29 = (List.cons) in (false)) ) (((<)) ((List.length) ([]) ) (((~-)) (0) ) ) ,List.filter)) )  end)