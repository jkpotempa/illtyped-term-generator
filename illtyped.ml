let safeHead list = 
    match list with
    | [] -> None
    | (h::t) -> Some h

let safeTail list =
    match list with
    | [] -> []
    | (h::t) -> t

let compose f g x = f (g x)

let ifthenelse c a b = if c then a else b

let cons x xs = x :: xs

let welltypedProgram = let y1 = (((fun  x1 x3 x4 x5 x6 x7 x8 x9 -> ((+)) ((if (x1) then ((compose) ((fun x2 -> 1)) ((begin match x4 with | None -> x3; | Some x -> x end)) (((=)) (x5) (x6) ) ) else ((begin match x8 with | None -> ((~-)) (x7) ; | Some x -> x end)))) (x9) )) ((fst) (((compose) ((fst) (((fun id -> id),false)) ) ((fun x21 -> ((fun id -> id)) (x21) )) (((||)) (((||)) (false) (true) ) (let y12 = ((fun id -> id)) in (false)) ) ,((@)) (((fun  x10 -> x10)) ((compose) ((fun id -> id)) ((fun id -> id)) ([]) ) ) ((compose) (let y9 = ((fun id -> id)) in ((fun id -> id))) ((compose) ((@)) ((fun id -> id)) ([]) ) ((List.map) (ifthenelse) ([]) ) ) )) ) ((fun (x22 : bool) -> (compose) (fst) ((fun x23 -> (snd,(safeHead) ([]) ))) (safeHead) )) ((begin match (List.map) (let y13 = ((&&)) in (List.filter)) ((fst) ((((fun id -> id)) ([]) ,safeTail)) )  with | [] -> ((fun  x24 x25 x26 x29 x30 -> (if (((||)) (x24) (x25) ) then (x26) else ((compose) (x29) ((~-)) (x30) )))) (true) ((snd) ((cons,((||)) (false) (false) )) ) ((safeHead) ([]) ) ((begin match ((fun id -> id)) ((safeHead) ([]) )  with | None -> (fun (x148 : int) -> (safeHead) ([]) ); | Some x -> x end)) ((begin match (if (((&&)) (false) (true) ) then ((cons) (compose) ([]) ) else ((cons) (compose) ([]) )) with | [] -> (snd) ((fst,1)) ; | (z101::z102) -> (snd) (((fun id -> id),1))  end)) ; | (z17::z18) -> (compose) ((snd) ((((+)) (1) (0) ,snd)) ) ((compose) ((fun x151 -> snd)) ((fun x152 -> (begin match x152 with | [] -> false; | (z111::z112) -> true end))) ((fst) ((z18,(=))) ) ) (((<),(cons,(safeHead) ([]) )))  end)) (((<)) ((begin match [] with | [] -> (if ((compose) ((begin match [] with | [] -> (fun id -> id); | (z119::z120) -> (fun id -> id) end)) ((if (false) then (snd) else (fst))) ((true,true)) ) then (((-)) ((if (true) then (0) else (0))) ((begin match [] with | [] -> 0; | (z125::z126) -> 1 end)) ) else ((compose) ((fun x161 -> 0)) (let y78 = (false) in (List.map)) (List.map) )); | (z117::z118) -> ((~-)) (((~-)) ((begin match z118 with | [] -> 0; | (z129::z130) -> z117 end)) )  end)) (((+)) (((-)) ((fst) ((1,true)) ) (((~-)) ((begin match [] with | [] -> 0; | (z131::z132) -> 0 end)) ) ) ((List.length) ((List.map) (snd) ([]) ) ) ) ) ((if (true) then (((fun id -> id)) (((<)) (((fun id -> id)) ((compose) ((fun id -> id)) ((~-)) (1) ) ) (((fun  x164 -> x164)) (let y84 = (1) in (y84)) ) ) ) else ((snd) ((((&&)) (((=)) (false) (false) ) ((if (true) then (true) else (false))) ,((||)) (((<)) (0) (1) ) (((=)) (false) (true) ) )) ))) (((-)) (0) ((begin match (safeHead) ((fst) (([],[])) )  with | None -> ((fun id -> id)) (((-)) (((~-)) (0) ) (((~-)) (0) ) ) ; | Some x -> x end)) ) ((if (((=)) (((||)) (((fun  x168 -> x168)) ((if (true) then (true) else (true))) ) (((fun id -> id)) (((||)) (true) (true) ) ) ) ((if (((&&)) (true) (false) ) then ((compose) ((fun id -> id)) ((if (false) then ((fun id -> id)) else ((fun id -> id)))) ((begin match [] with | [] -> true; | (z165::z166) -> false end)) ) else ((fst) ((true,(<))) ))) ) then ((if (((<)) ((begin match (begin match [] with | [] -> []; | (z171::z172) -> z172 end) with | [] -> 0; | (z169::z170) -> ((+)) (z169) (1)  end)) ((compose) (List.length) (let y100 = (fst) in (y100)) (([],(~-))) ) ) then (let y102 = ((safeHead) (((@)) ([]) ([]) ) ) in ((compose) ((begin match y102 with | None -> (fun id -> id); | Some x -> x end)) ((fun x185 -> x185)) ((safeHead) ([]) ) )) else ((fst) (((safeHead) ([]) ,((fun id -> id)) ((-)) )) ))) else (((fun  x190 -> x190)) ((safeHead) ((if (((<)) (1) (0) ) then ((safeTail) ([]) ) else ((if (false) then ([]) else ([]))))) ) ))) (((-)) ((begin match (begin match (snd) (([],[]))  with | [] -> []; | (z209::z210) -> (if (((<)) (z209) (0) ) then ((safeTail) (z210) ) else (((@)) ([]) ([]) )) end) with | [] -> ((+)) ((List.length) ((safeTail) ([]) ) ) (((+)) ((if (true) then (1) else (1))) (0) ) ; | (z207::z208) -> ((fun  x197 -> (List.length) (x197) )) (let y124 = (((+)) (0) (z207) ) in ((if (true) then (z208) else (z208))))  end)) ((List.length) (((@)) ((begin match [] with | [] -> (begin match [] with | [] -> []; | (z225::z226) -> z225 end); | (z223::z224) -> (List.filter) (fst) (z223)  end)) ((begin match (compose) (safeHead) ((fun id -> id)) ([])  with | None -> (if (true) then ([]) else ([])); | Some x -> x end)) ) ) ) ) in (((fun id -> id)) ((fst) (((snd) ((snd,((+)) (0) (y1) )) ,((&&)) ((if (((<)) (y1) (y1) ) then (let y3 = (false) in (y3)) else ((compose) ((fun id -> id)) ((fun id -> id)) (true) ))) (((fun id -> id)) (((||)) (true) (false) ) ) )) ) )

let illtypedProgram  = let y1 = (((fun  x1 x3 x4 x5 x6 x7 x8 x9 -> ((+)) ((if (x1) then ((compose) ((fun x2 -> 1)) ((begin match x4 with | None -> x3; | Some x -> x end)) (((=)) (x5) (x6) ) ) else ((begin match x8 with | None -> ((~-)) (x7) ; | Some x -> x end)))) (x9) )) ((fst) (((compose) ((fst) (((fun id -> id),false)) ) ((fun x21 -> ((fun id -> id)) (x21) )) (((||)) (((||)) (false) (true) ) (let y12 = ((fun id -> id)) in (false)) ) ,((@)) (((fun  x10 -> x10)) ((compose) ((fun id -> id)) ((fun id -> id)) ([]) ) ) ((compose) (let y9 = ((fun id -> id)) in ((fun id -> id))) ((compose) ((@)) ((fun id -> id)) ([]) ) ((List.map) (ifthenelse) ([]) ) ) )) ) ((fun (x22 : bool) -> (compose) (fst) ((fun x23 -> (snd,(safeHead) ([]) ))) (safeHead) )) ((begin match (List.map) (let y13 = ((&&)) in (List.filter)) ((fst) ((((fun id -> id)) ([]) ,safeTail)) )  with | [] -> ((fun  x24 x25 x26 x29 x30 -> (if (((||)) (x24) (x25) ) then (x26) else ((compose) (x29) ((~-)) (x30) )))) (true) ((snd) ((cons,((||)) (false) (false) )) ) ((safeHead) ([]) ) ((begin match ((fun id -> id)) ((safeHead) ([]) )  with | None -> (fun (x148 : int) -> (safeHead) ([]) ); | Some x -> x end)) ((begin match (if (((&&)) (false) (true) ) then ((cons) (compose) ([]) ) else ((cons) (compose) ([]) )) with | [] -> (snd) ((fst,1)) ; | (z101::z102) -> (snd) (((fun id -> id),1))  end)) ; | (z17::z18) -> (compose) ((snd) ((((+)) (1) (0) ,snd)) ) ((compose) ((fun x151 -> snd)) ((fun x152 -> (begin match x152 with | [] -> false; | (z111::z112) -> true end))) ((fst) ((z18,(=))) ) ) (((<),(cons,(safeHead) ([]) )))  end)) (((<)) ((begin match [] with | [] -> (if ((compose) ((begin match [] with | [] -> (fun id -> id); | (z119::z120) -> (fun id -> id) end)) ((if (false) then (snd) else (fst))) ((true,true)) ) then (((-)) ((if (true) then (0) else (0))) ((begin match [] with | [] -> 0; | (z125::z126) -> 1 end)) ) else ((compose) ((fun x161 -> 0)) (let y78 = (false) in (List.map)) (List.map) )); | (z117::z118) -> ((~-)) (((~-)) ((begin match z118 with | [] -> 0; | (z129::z130) -> z117 end)) )  end)) (((+)) (((-)) ((fst) ((1,true)) ) (((~-)) ((begin match [] with | [] -> 0; | (z131::z132) -> 0 end)) ) ) ((List.length) ((List.map) (snd) ([]) ) ) ) ) ((if (true) then (((fun id -> id)) (((<)) (((fun id -> id)) ((compose) ((fun id -> id)) ((~-)) (1) ) ) (((fun  x164 -> x164)) (let y84 = (1) in (y84)) ) ) ) else ((snd) ((((&&)) (((=)) (false) (false) ) ((if (true) then (true) else (false))) ,((||)) (((<)) (0) (1) ) (((=)) (false) (true) ) )) ))) (((-)) (0) ((begin match (safeHead) ((fst) (([],[])) )  with | None -> ((fun id -> id)) (((-)) (((~-)) (0) ) (((~-)) (0) ) ) ; | Some x -> x end)) ) ((if (((=)) (((||)) (((fun  x168 -> x168)) ((if (true) then (true) else (true))) ) (((fun id -> id)) (((||)) (true) (true) ) ) ) ((if (((&&)) (true) (false) ) then ((compose) ((fun id -> id)) ((if (false) then ((fun id -> id)) else ((fun id -> id)))) ((begin match [] with | [] -> true; | (z165::z166) -> false end)) ) else ((fst) ((true,(<))) ))) ) then ((if (((<)) ((begin match (begin match [] with | [] -> []; | (z171::z172) -> z172 end) with | [] -> 0; | (z169::z170) -> ((+)) (z169) (1)  end)) ((compose) (List.length) (let y100 = (fst) in (y100)) (([],(~-))) ) ) then (let y102 = ((safeHead) (((@)) ([]) ([]) ) ) in ((compose) ((begin match y102 with | None -> (fun id -> id); | Some x -> x end)) ((fun x185 -> x185)) ((safeHead) ([]) ) )) else ((fst) (((safeHead) ([]) ,((fun id -> id)) ((-)) )) ))) else (((fun  x190 -> x190)) ((safeHead) ((if (((<)) (1) (0) ) then ((safeTail) ([]) ) else ((if (false) then ([]) else ([]))))) ) ))) (((-)) ((begin match (begin match (snd) (([],[]))  with | [] -> []; | (z209::z210) -> (if (((<)) (z209) (0) ) then ((safeTail) (z210) ) else (((@)) ([]) ([]) )) end) with | [] -> ((+)) ((List.length) ((safeTail) ([]) ) ) (((+)) ((if (true) then (1) else (1))) (0) ) ; | (z207::z208) -> ((fun  x197 -> (List.length) (x197) )) (let y124 = (((+)) (0) (z207) ) in ((if (true) then (z208) else (z208))))  end)) ((List.length) (((@)) ((begin match [] with | [] -> (begin match [] with | [] -> []; | (z225::z226) -> z225 end); | (z223::z224) -> (List.filter) (fst) (z223)  end)) ((begin match (compose) (safeHead) ((fun id -> id)) ([])  with | None -> (if (true) then ([]) else ([])); | Some x -> x end)) ) ) ) ) in (((fun id -> id)) ((fst) (((snd) ((((List.map) ((if ((fst) ((((=)) (let y132 = (List.map) in (false)) (((&&)) (false) (true) ) ,(List.filter) ((if (true) then (snd) else (snd))) (let y130 = ([]) in (y130)) )) ) then ((if (((&&)) (((fun  x202 -> x202)) (((=)) (true) (false) ) ) (((=)) (((||)) (true) (true) ) (((=)) (false) (false) ) ) ) then ((compose) ((begin match (safeTail) ([])  with | [] -> (fun x203 -> (fun id -> id)); | (z241::z242) -> fst end)) (snd) ((true,((fun id -> id),(+)))) ) else ((fun id -> id)))) else ((fun id -> id)))) (((@)) ((fst) (((fst) (([],0)) ,List.filter)) ) ((List.filter) ((compose) ((fst) ((fst,List.filter)) ) ((begin match (safeHead) ([])  with | None -> ((fun id -> id)) (fst) ; | Some x -> x end)) ((((fun id -> id),false),((&&)) (true) (false) )) ) ((List.filter) ((begin match let y142 = ((+)) in ([]) with | [] -> ((fun id -> id)) ((fun id -> id)) ; | (z255::z256) -> (fun (x208 : bool) -> false) end)) ((begin match (safeHead) ([])  with | None -> ((fun id -> id)) ([]) ; | Some x -> x end)) ) ) ) ) ((safeTail) ([]) ),((+)) (0) (y1) )) ,((&&)) ((if (((<)) (y1) (y1) ) then (let y3 = (false) in (y3)) else ((compose) ((fun id -> id)) ((fun id -> id)) (true) ))) (((fun id -> id)) (((||)) (true) (false) ) ) )) ) )